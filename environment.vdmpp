class Environment is subclass of GLOBAL

types
    private inline = Time * Car;
    private outline = Time * set of Car * set of StreetLamp;

values
    private time_max : Time = 60.0;

instance variables
    private io : IO := new IO();

    private inlines : seq of inline := [];
    private outlines : seq of outline := [];
    private city : City;
    
    private busy : bool := true;

operations
    -- debug: [io]
    --        Seems that `success` is always false,
    --        I don't know where to start debugging
    public Environment : () ==> Environment
    Environment() == (
        -- note: cant read files does not work with custom typs/classes
        inlines := [
            mk_(0.0, new Car(1, 0.0,  1)),
            mk_(1.0, new Car(2, 0.0,  1)),
            mk_(1.0, new Car(3, 0.0,  1)),
            mk_(2.0, new Car(4, 0.0,  1)),
            mk_(2.0, new Car(5, 0.0, -1)),
            mk_(2.0, new Car(6, 0.0, -1)),
            mk_(3.0, new Car(7, 0.0,  1)),
            mk_(3.0, new Car(2, 0.0, -1)),
            mk_(3.0, new Car(3, 0.0, -1)),
            mk_(4.0, new Car(4, 0.0,  1)),
            mk_(4.0, new Car(3, 0.0, -1)),
            mk_(5.0, new Car(6, 0.0,  1)),
            mk_(5.0, new Car(5, 0.0, -1)),
            mk_(5.0, new Car(8, 0.0, -1))
        ];
        city := new City(
            [
                new Position(   0.0,    0.0), -- intersection 1
                new Position(   0.0,   50.0), -- intersection 2
                new Position( 100.0,   50.0), -- intersection 3
                new Position( 100.0,    0.0), -- intersection 4
                new Position(-170.0, -170.0), -- intersection 5
                new Position(  50.0, -100.0), -- intersection 6
                new Position( 120.0, -120.0), -- intersection 7
                new Position( -100.0,-250.0)  -- intersection 8
            ],
            [
                mk_Edge(1, 2), -- road from intersection 1 to intersection 2
                mk_Edge(2, 3),
                mk_Edge(3, 4),
                mk_Edge(4, 1),
                mk_Edge(1, 5),
                mk_Edge(4, 6),
                mk_Edge(4, 7),
                mk_Edge(6, 7),
                mk_Edge(1, 6),
                mk_Edge(6, 8),
                mk_Edge(8, 5)
            ]
        );
    );

    -- output the outlines
    public show_result : () ==> ()
    show_result() ==
        def - = io.writeval[seq of outline](outlines) in skip;
    
    public show_city : () ==> ()
    show_city() ==
        def - = io.writeval[City](city) in skip;

    -- write outlines to file
    public write_result : String ==> ()
    write_result(p_fname) ==
        def - = io.fwriteval[seq of outline](p_fname, outlines, <start>) in skip;
    
    -- Function to run through the inlines and generate the outlines
    public run : () ==> ()
    run() == (
        while not is_finished() do (
            handle_inlines();
            city.step();
            World`timer_ref.step_time();
            make_outline();
        );
        write_result("out.txt");
        -- show_result();
        -- show_city();
    );

    -- Function to handle all inlines for the current time
    private handle_inlines : () ==> ()
    handle_inlines() == (
        if len inlines > 0 then (
            dcl current_time : Time := World`timer_ref.get_time(),
                done : bool := false;
            while not done do (
                def mk_(time, car) = hd inlines in
                    if time <= current_time then (
                        city.add_car(car);
                        inlines := tl inlines;
                        done := len inlines = 0;
                    )
                    else done := true;
            )
        )
        else busy := false;
    );

    -- Function to make an outline for the current time
    private make_outline : () ==> ()
    make_outline() ==
        let time = World`timer_ref.get_time() in
            let cars = {
                new Car(
                    car.get_road_id(),
                    car.get_progress(),
                    car.get_direction()
                ) | car in set city.get_cars()
            } in 
                let lamps = {
                    new StreetLamp(
                        lamp.get_road_id(),
                        lamp.get_position(),
                        lamp.get_state()
                    ) | lamp in set city.get_street_lamps()
                } in
                    outlines := outlines ^ [mk_(time, cars, lamps)];

    -- I think maybe we should keep simulating until all cars have exited the city
    public is_finished : () ==> bool 
    is_finished() == 
        let cars = city.get_cars() in
            return card cars = 0 and not busy or World`timer_ref.get_time() >= time_max;

end Environment