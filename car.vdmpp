class Car is subclass of GLOBAL

values
    -- defines speed along a road
    -- negative speed means driving in the opposite direction
    private speed : real = 10; -- m/s = 36 km/h

instance variables
    -- reference to the road the car is driving on
    private road_id : RoadID;

    -- the distance of the car along the road
    -- a real number between 0 and the length of the road
    -- note: if the road could be looked up an invariant could be added
    private distance : real := 0; -- m

    -- direction denoted by either 1 or -1
    private direction : int := 1;
    inv direction in set {-1, 1};

functions
    -- calculate distance
    private new_distance : real * real * Time * int -> real
    new_distance(p_distance, p_speed, p_dt, p_direction) ==
        p_distance + p_direction * p_speed * p_dt;

operations
    public Car : RoadID * real * int ==> Car
    Car(p_road_id, p_distance, p_direction) == (
        road_id := p_road_id;
        distance := p_distance;
        direction := p_direction;
    )
    pre p_direction in set {-1, 1};

    pure public get_distance : () ==> real
    get_distance() == return distance;

    public set_distance : real ==> ()
    set_distance(p_distance) == distance := p_distance;

    pure public get_road_id : () ==> RoadID
    get_road_id() == return road_id;

    public set_road_id : RoadID ==> ()
    set_road_id(p_road_id) == road_id := p_road_id;

    pure public get_direction : () ==> int
    get_direction() == return direction
    post RESULT in set {-1, 1};

    public set_direction : int ==> ()
    set_direction(p_direction) == direction := p_direction
    pre p_direction in set {-1, 1};

    public drive : Time ==> real
    drive(dt) == (
        distance := new_distance(distance, speed, dt, direction);
        return distance;
    );

end Car