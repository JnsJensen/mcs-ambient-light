class Car

values
    -- defines speed along a road
    -- negative speed means driving in the opposite direction
    public velocity : real = 10; -- m/s

instance variables
    -- reference to the road the car is driving on
    private road : RoadSegment;

    -- the progress of the car along the road
    -- a real number between 0 and the length of the road
    private progress : real := 0; -- m

    -- direction denoted by either 1 or -1
    -- invariant should exist to make sure this holds
    -- question: I could also use a specific type,
    --           but that's not as convenient
    -- note: Discuss this in the report
    --       Removing the semantics of having a direction on the road
    --         - The current intersection1 and intersection2
    --       This would mean that the car wouldn't neet a direction either
    --       We just need to keep track of which intersection it came from
    private direction : int := 1;
    inv direction in set {-1, 1};

functions
    -- calculate progress
    private new_progress : real * real * real * int -> real
    new_progress(p_progress, p_velocity, p_dt, p_direction) ==
        p_progress + p_direction * p_velocity * p_dt;

operations
    public Car : RoadSegment * real * int ==> Car
    Car(p_road, p_progress, p_direction) == (
        road := p_road;
        progress := p_progress;
        direction := p_direction;
    );

    pure public get_progress : () ==> real
    get_progress() == return progress;

    public set_progress : real ==> ()
    set_progress(p_progress) == progress := p_progress;

    pure public get_road : () ==> RoadSegment
    get_road() == return road;

    public drive : real ==> real
    drive(dt) == (
        progress := new_progress(progress, velocity, dt, direction);
        return progress;
    );

end Car