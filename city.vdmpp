class City is subclass of GLOBAL

-- The City is a collection of Roads and Intersections
-- See it as a graph
--      Each intersection is a node in the graph
--      Each road is an edge in the graph

instance variables
    private intersections : set of Intersection; -- graph nodes
    private roads : set of Road; -- graph edges
    private road_to_intersections : RoadGraph; -- graph
    private intersection_to_roads : IntersectionGraph; -- graph   

functions
    private make_road_graph : seq of Edge -> RoadGraph
    make_road_graph(p_edges) ==
        make_road_graph_rec(p_edges, 1);

    private make_road_graph_rec : seq of Edge * RoadID -> RoadGraph
    make_road_graph_rec(p_edges_rec, p_id) ==
        if p_edges_rec = [] then
            { |-> }
        else
            let edge = hd p_edges_rec in
                let rest = make_road_graph_rec(tl p_edges_rec, p_id + 1) in
                    rest ++ {p_id |-> edge}
    measure len p_edges_rec;

    -- infer map from Intersections to Roads from map from Roads to Intersections
    private make_intersection_graph : set of IntersectionID * RoadGraph -> IntersectionGraph
    make_intersection_graph(p_intersection_ids, p_road_to_intersections) ==
        {
            intersection_id |-> {
                road_id
                | road_id in set dom p_road_to_intersections &
                    let edge = p_road_to_intersections(road_id) in
                        edge.from_intersection = intersection_id or edge.to_intersection = intersection_id
            }
            | intersection_id in set p_intersection_ids
        };

    -- calculate the traffic density
    private calc_traffic_density : set of Car * seq of real0 -> real0
    calc_traffic_density(p_cars, p_roads_lengths) ==
        let total_road_length = sum_seq_real0s(p_roads_lengths) in
            card p_cars / total_road_length
    pre len p_roads_lengths > 0;

    -- -- calculate the power usage
    -- private calc_power_usage : seq of StreetLampState -> real01
    -- calc_power_usage(p_street_lamp_states) ==
    --     let on_street_lamps = {
    --         street_lamp_state
    --         | street_lamp_state in seq p_street_lamp_states
    --         & street_lamp_state = <ON>
    --     } in
    --         card on_street_lamps / len p_street_lamp_states
    -- pre len p_street_lamp_states > 0
        -- and {street_lamp_state | street_lamp_state in seq p_street_lamp_states & street_lamp_state = <ON>} subset p_street_lamp_states;

operations
    -- make roads from RoadGraph
    private make_roads : RoadGraph * seq of Position ==> set of Road
    make_roads(p_road_to_intersections, p_intersection_positions) ==
        return {
            new Road(
                road_id,
                p_intersection_positions(p_road_to_intersections(road_id).from_intersection),
                p_intersection_positions(p_road_to_intersections(road_id).to_intersection)
            )
            | road_id in set dom p_road_to_intersections
        };
    
    -- make intersections from IntersectionGraph
    private make_intersections : seq of Position * IntersectionGraph ==> set of Intersection
    make_intersections(p_intersection_positions, p_intersection_to_roads) ==
        return {
            new Intersection(
                intersection_id,
                p_intersection_positions(intersection_id),
                {
                    road
                    | road in set roads & road.get_id() in set p_intersection_to_roads(intersection_id)
                }
            )
            | intersection_id in set dom p_intersection_to_roads
        };

    -- constructor
    -- takes a sequence of positions, that define the placement of intersections
    -- along with the index for the each position as the intersection id
    -- takes a set of edges which describes which
    -- intersection ids (indices in the sequence) are connected
    public City : seq of Position * seq of Edge ==> City
    City(p_intersection_positions, p_edges) == (
        -- make the graphs
        road_to_intersections := make_road_graph(p_edges);
        intersection_to_roads := make_intersection_graph(inds p_intersection_positions, road_to_intersections);
        
        -- instantiation
        roads := make_roads(road_to_intersections, p_intersection_positions);
        intersections := make_intersections(p_intersection_positions, intersection_to_roads);
    )
    pre len p_intersection_positions >= 2
        -- and forall i1 in set VDMUtil`seq2set(p_intersection_positions) & forall i2 in set VDMUtil`seq2set(p_intersection_positions) \ i1 & i1 <> i2
        -- and forall e1, e2 in seq p_edges & e1 <> e2
        and forall e3 in seq p_edges & e3.from_intersection <> e3.to_intersection
        and e3.from_intersection in set inds p_intersection_positions
        and e3.to_intersection in set inds p_intersection_positions
    post card roads = len p_edges
        and card intersections = len p_intersection_positions;

    -- add a car to the city
    -- with the car is a road id which is used to place the car
    public add_car : Car ==> ()
    add_car(p_car) == (
        -- 1. find the intersection
        -- 2. choose random road from intersection
        -- 3. add car to road
        let road_id = p_car.get_road_id() in
            let road in set roads be st road.get_id() = road_id in
                road.add_car(p_car);
    )
    pre p_car.get_road_id() in set dom road_to_intersections;

    public step : () ==> ()
    step() == (
        -- 1. move the cars
        --    1.1. if car reaches intersection, move it to the next road
        --    1.2. if car reaches an intersection with no new road to move to, remove it
        -- 2. sense cars
        -- 3. turn street lamps on or off

        -- 1. step all cars
        step_cars();
        -- 2. step all sensors
        step_sensors();
        -- 3. step all street lamps
        step_street_lamps();
    );

    -- 1. step all cars
    --    1.1. if car reaches intersection, move it to the next road
    --    1.2. if car reaches an intersection with no new road to move to, remove it
    private step_cars : () ==> ()
    step_cars() ==
        let cars = get_cars() in
            for all car in set cars do (
                -- Then the steps would be
                -- 1. drive the car
                -- check if the car has overstepped a road
                --     1. remove the car from the road
                --     2. car.distance < road.length -> choose from_intersection
                --     3. car.distance > road.length -> choose to_intersection
                --     4. select a new road from the intersection
                --     5. add the car to the new road
                
                let new_distance = car.drive(World`timer_ref.get_step_length()) in 
                    let road in set roads be st road.get_id() = car.get_road_id() in (
                        let mk_(intersection_id, distance_remainder) = (
                            if new_distance > road.get_length() then
                                mk_(road_to_intersections(road.get_id()).to_intersection, new_distance - road.get_length())
                            elseif new_distance < 0 then
                                mk_(road_to_intersections(road.get_id()).from_intersection, abs new_distance)
                            else mk_(nil, nil)
                            ) in
                                if intersection_id <> nil then
                                    let intersection in set intersections be st intersection.get_id() = intersection_id in (
                                        road.remove_car(car);
                                        let next_road = intersection.next_road(road) in
                                            if next_road <> nil then (
                                                next_road.add_car(car);
                                                if intersection_id
                                                   = road_to_intersections(next_road.get_id())
                                                   .from_intersection then (
                                                    car.set_direction(1);
                                                    car.set_distance(distance_remainder);
                                                ) else (
                                                    car.set_direction(-1);
                                                    car.set_distance(next_road.get_length() - distance_remainder);
                                                );
                                            );
                                    );
                    );
            );

    -- 2. step all sensors
    private step_sensors : () ==> ()
    step_sensors() ==
        let sensors = dunion {
            road.get_sensors()
            | road in set roads
        } in
            for all sensor in set sensors do
                sensor.sense();

    -- 3. step all street lamps
    private step_street_lamps : () ==> ()
    step_street_lamps() ==
        let street_lamps = get_street_lamps() in
            for all street_lamp in set street_lamps do
                let road in set roads be st road.get_id() = street_lamp.get_road_id() in
                    let sensor in set road.get_sensors() be st sensor.get_position() = street_lamp.get_position() in
                        if sensor.is_triggered() then
                            street_lamp.on()
                        else
                            street_lamp.off();

    -- public getter for all cars
    pure public get_cars : () ==> set of Car
    get_cars() ==
        return dunion {
            road.get_cars()
            | road in set roads
        };
    
    -- public getter for all street lamps
    pure public get_street_lamps : () ==> set of StreetLamp
    get_street_lamps() ==
        return dunion {
            road.get_street_lamps()
            | road in set roads
        };

    -- calculate power usage as a percentage
    -- this is turned-on-street-lamps / total-street-lamps
    pure public power_usage : () ==> real01
    power_usage() ==
        let street_lamps = get_street_lamps() in
                let on_street_lamps = {
                    street_lamp
                    | street_lamp in set street_lamps
                    & street_lamp.get_state() = <ON>
                } in
                    return card on_street_lamps / card street_lamps
    post RESULT >= 0 and RESULT <= 1;
        -- let street_lamp_states = [
        --     street_lamp.get_state()
        --     | street_lamp in set get_street_lamps()
        --  ] in
        --     return calc_power_usage(street_lamp_states);
    -- pre card get_street_lamps() > 0
    --     and {street_lamp | street_lamp in set get_street_lamps() & street_lamp.get_state() = <ON>} subset get_street_lamps()
    -- post RESULT > 0 and RESULT < 1;

    -- calculate traffic density as cars / total road length
    pure public traffic_density : () ==> real0
    traffic_density() ==
        let road_lengths = VDMUtil`set2seq[real0]({
            road.get_length()
            | road in set roads
        }) in
            return calc_traffic_density(get_cars(), road_lengths);
    -- pre card roads > 0
    --     and forall road_length in set {road.get_length() | road in set roads} & road_length > 0
    -- post RESULT > 0;

end City