@startuml mcs-ambient-light

hide empty members
skinparam Shadowing false
skinparam classAttributeIconSize 0
skinparam ClassBorderThickness 0.5
skinparam groupInheritance 5
skinparam class {
	BackgroundColor AntiqueWhite
	ArrowColor Black
	BorderColor Black
}
skinparam defaultTextAlignment center

class GLOBAL
{
	+Time : nat <<type>>
	+String : seq of char <<type>>
	+StreetLampState : <OFF> | <ON> <<type>>
	+RoadID : nat1 <<type>>
	+IntersectionID : nat1 <<type>>
	+Edge : {intersection1 : intersection2} <<type>>
	+RoadGraph : map RoadID to Edge <<type>>
	+IntersectionGraph : map IntersectionID to set... <<type>>
}

class Car
{
	+velocity : real <<value>>
	+road : Road
	-progress : real
	+direction : int
	+Car(RoadSegment, real, int) : Car
	+getProgress() : real
	+setProgress(real)
}

class City
{
	+road_to_intersections : RoadGraph
	+intersection_to_roads : IntersectionGraph
	-make_road_graph(set of Edge) : RoadGraph <<function>>
	-make_road_graph_rec(set of Edge, RoadID) : RoadGraph <<function>>
	-make_intersection_graph(set of IntersectionID, RoadGraph) : IntersectionGraph <<function>>
	-make_roads(RoadGraph, seq of Position) : set of RoadSegment
	-make_intersections(seq of Position) : set of Intersection
	-City(seq of Position, set of Edge) : City
	+add_car(Car, Position)
	+step()
}

class Intersection
{
	+ID : IntersectionID
	+Intersection(IntersectionID, Position, set of RoadSegment) : Intersection
	+next_road(RoadSegment) : RoadSegment
}

class Road
{
}

class RoadSegment
{
	-st_spacing : real <<value>>
	+ID : RoadID
	-length : real
	+RoadSegment(RoadID, Position, Position) : RoadSegment
	+get_length() : real
	+add_car(Car)
	+remove_car(Car)
	+get_cars() : set of Car
}

class Sensor
{
	+range : real <<value>>
	-road : RoadSegment
	-position : real
	+Sensor(RoadSegment, real) : Sensor
	+sense()
	+get_cars() : set of Car
}

class StreetLamp
{
	-lamp_state : StreetLampState
	+sensor : Sensor
	+road : Road
	+position : real
	+StreetLamp(Road, real) : StreetLamp
	+on()
	+off()
}

class Timer
{
	-current_time : nat
	+step_length : nat <<value>>
	+step_time()
	+get_time() : nat
}

class Environment
{
	-inline : ** <<type>>
	-outline : ** <<type>>
	-io : IO
	-inlines : seq of inline
	-outlines : seq of outline
	-city : City
	-busy : bool
	+Environment(String, String) : Environment
	+show_result()
	+run()
	-handle_inlines()
	+is_finished() : bool
}

class Position
{
	+x : real
	+y : real
	+Position(real, real) : Position
	+distance_to(Position) : real
}

class World
{
	-World() : World
	+run()
}

StreetLamp --> Position : +position
Sensor --> Position : +position
Intersection --> Position : +position
World --> Timer : +timerRef
City --> "*" Intersection : +intersections
City --> "*" RoadSegment : +roads
GLOBAL <|-- City
Intersection --> "*" RoadSegment : +connections
Road <|-- Intersection
Road --> "(*)" StreetLamp : -street_lamps
Road --> "*" Road : -connections
GLOBAL <|-- Road
RoadSegment --> "*" Car : -cars
RoadSegment --> "*" StreetLamp : +street_lamps
Road <|-- RoadSegment
Sensor --> "*" Car : -cars
GLOBAL <|-- StreetLamp
GLOBAL <|-- Environment
World --> "0..1" Environment : +env

@enduml