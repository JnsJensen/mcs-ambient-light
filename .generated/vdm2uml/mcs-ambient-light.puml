@startuml mcs-ambient-light

hide empty members
skinparam Shadowing false
skinparam classAttributeIconSize 0
skinparam ClassBorderThickness 0.5
skinparam groupInheritance 5
skinparam class {
	BackgroundColor AntiqueWhite
	ArrowColor Black
	BorderColor Black
}
skinparam defaultTextAlignment center

class Car
{
	-velocity : real <<value>>
	-road_id : RoadID
	-progress : real
	-direction : int
	-new_progress(real, real, real, int) : real <<function>>
	+Car(RoadID, real, int) : Car
	+get_progress() : real
	+set_progress(real)
	+get_road_id() : RoadID
	+set_road_id(RoadID)
	+get_direction() : int
	+set_direction(int)
	+drive(real) : real
}

class City
{
	-road_to_intersections : RoadGraph
	-intersection_to_roads : IntersectionGraph
	-make_road_graph(seq of Edge) : RoadGraph <<function>>
	-make_road_graph_rec(seq of Edge, RoadID) : RoadGraph <<function>>
	-make_intersection_graph(set of IntersectionID, RoadGraph) : IntersectionGraph <<function>>
	-make_roads(RoadGraph, seq of Position) : set of Road
	-make_intersections(seq of Position, IntersectionGraph) : set of Intersection
	+City(seq of Position, seq of Edge) : City
	+add_car(Car)
	+step()
	+step_cars()
	+step_sensors()
	+step_street_lamps()
	+get_cars() : set of Car
	+get_street_lamps() : set of StreetLamp
}

class Environment
{
	-inline : Time * Car <<type>>
	-outline : ** <<type>>
	-time_max : Time <<value>>
	-io : IO
	-inlines : seq of inline
	-outlines : seq of outline
	-busy : bool
	+Environment() : Environment
	+show_result()
	+show_city()
	+write_result(String)
	+run()
	-handle_inlines()
	-make_outline()
	+is_finished() : bool
}

class GLOBAL
{
	+Time : real <<type>>
	+String : seq of char <<type>>
	+StreetLampState : <OFF> | <ON> <<type>>
	+RoadID : nat1 <<type>>
	+IntersectionID : nat1 <<type>>
	+Edge : {intersection1 : intersection2} <<type>>
	+RoadGraph : map RoadID to Edge <<type>>
	+IntersectionGraph : map IntersectionID to set... <<type>>
}

class Intersection
{
	-id : IntersectionID
	-position : Position
	+Intersection(IntersectionID, Position, set of Road) : Intersection
	+get_id() : IntersectionID
	+get_position() : Position
	+get_connections() : set of Road
	+next_road(Road) : [Road]
}

class Position
{
	-x : real
	-y : real
	+Position(real, real) : Position
	+distance_to(Position) : real
}

class Road
{
	-st_spacing : real <<value>>
	-id : RoadID
	-length : real
	+Road(RoadID, Position, Position) : Road
	+get_id() : RoadID
	+get_length() : real
	+get_cars() : set of Car
	+get_street_lamps() : set of StreetLamp
	+get_sensors() : set of Sensor
	+add_car(Car)
	+remove_car(Car)
}

class Sensor
{
	-range : real <<value>>
	-road : Road
	-road_id : RoadID
	-position : real
	+Sensor(Road, real) : Sensor
	+sense()
	+get_cars() : set of Car
	+get_position() : real
}

class StreetLamp
{
	-lamp_state : StreetLampState
	-road_id : RoadID
	-position : real
	+StreetLamp(Road, real) : StreetLamp
	+StreetLamp(RoadID, real, StreetLampState) : StreetLamp
	+on()
	+off()
	+get_road_id() : RoadID
	+get_position() : real
	+get_state() : StreetLampState
}

class Timer
{
	-current_time : real
	-step_length : real <<value>>
	+step_time()
	+get_time() : real
	+get_step_length() : real
}

class World
{
	+timer_ref : Timer
	+World() : World
	+run()
}

Environment --> "0..1" City : -city
GLOBAL <|-- Car
City --> "*" Intersection : -intersections
City --> "*" Road : -roads
GLOBAL <|-- City
GLOBAL <|-- Environment
Intersection --> "*" Road : -connections
GLOBAL <|-- Intersection
Road --> "*" Car : -cars
Road --> "*" StreetLamp : -street_lamps
Road --> "*" Sensor : -sensors
GLOBAL <|-- Road
Sensor --> "*" Car : -cars
GLOBAL <|-- Sensor
GLOBAL <|-- StreetLamp
World --> "0..1" Environment : +env
GLOBAL <|-- World

@enduml